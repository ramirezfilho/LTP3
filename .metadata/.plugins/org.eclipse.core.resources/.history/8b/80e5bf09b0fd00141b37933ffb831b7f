package Usuario;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;

import utilitarios.Console;
import utilitarios.LtpUtil;
import cadastro.Cadastro;
import dados.Cliente;
import dados.ItemVenda;
import dados.Produto;
import dados.Venda;
import erros.SisVendasException;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import org.omg.CORBA.SystemException;

public class Usuario {	
		
	public static void main(String[] args) throws SisVendasException {
		
		if(fileExist()){
			lerArq("Venda");
			int ultimoValor = Cadastro.venda.get(Cadastro.venda.size()-1).getNumVenda();
			Venda.setSequence(ultimoValor);
			lerArq("Produto");
			ultimoValor = Cadastro.produto.get(Cadastro.produto.size()-1).getCodigo();
			Venda.setSequence(ultimoValor);
			lerArq("Cliente");
			ultimoValor = Cadastro.clientes.get(Cadastro.clientes.size()-1).getCodigo();
			Venda.setSequence(ultimoValor);
			
		}else{
		
			new File("Vendas.obj");
			new File("Produtos.obj");
			new File("Clientes.obj");
		}
	
	menu();
	gravarArq("Vendas");
	gravarArq("Produto");
	gravarArq("Cliente");
}

		//MENU DOS INFERNO!! 
		int option;
			
		do{
			option = Console.readInt(" ----- MENU DE OPÇÕES ----- \n"
					+ "\n CLIENTES" 
					+ "\n 1 - Incluir "
					+ "\n 2 - Alterar "
					+ "\n 3 - Excluir "
					+ "\n 4 - Buscar pelo CPF "
					+ "\n 5 - Exibir todos os clientes "
					+ "\n\n PRODUTOS"
					+ "\n 6 - Incluir Produto "
					+ "\n 7 - Alterar Produto "
					+ "\n 8 - Excluir Produto "
					+ "\n 9 - Exibir lista de Produtos "
					+ "\n\n VENDAS"
					+ "\n 10 - Incluir Venda"
					+ "\n 11 - Exibir Vendas"
					+ "\n\n -> Qual opção deseja?");
			
			switch(option){
				case 1 : incluirCliente(); break;
				case 2 : alterarCliente(); break;
				case 3 : excluirCliente(); break;
				case 4 : buscarClienteCPF(); break;
				case 5 : System.out.println(Cadastro.clientes); break;
				case 6 : incluirProduto(); break;
				case 7 : alterarProduto(); break;
				case 8 : excluirProduto(); break;
				case 9 : System.out.println(Cadastro.produto); break;
				case 10 : incluirVenda();break;
				case 11 : System.out.println(Cadastro.venda);break;
				case 12 : excluirVenda(); break;
			}
			
			for(int i = 0; i<5; i++) System.out.println("");
			
		}while(option != 15);
	}

	
	/**
	 * Método responsável pelo cadastro de clientes.
	 */
	private static void incluirCliente (){
		String cpf;
		String nome;
		String telefone;
		String email;
		
		Cliente inclusaoCliente;
		
		System.out.println(" ---- CADASTRO DE CLIENTES ---- ");
		
		
		do{
			cpf = Console.readLine("CPF: ");
		}while(!LtpUtil.validarCPF(cpf));
		
		do{
			nome = Console.readLine("NOME: ");
		}while(!nome.matches("^(\\D*)+(\\s*)+(\\D)$"));
		
		telefone =  Console.readLine("TELEFONE: ");
		
		do{
			email = Console.readLine("EMAIL: ");
		}while(!LtpUtil.validarEmail(email));
		
		
		Cadastro.incluirCliente(inclusaoCliente = new Cliente(nome,cpf,telefone,email, new GregorianCalendar(), new GregorianCalendar()));

	}
	
	/**
	 * Método responsável pela alteração dos cadastros dos Clientes.
	 * 
	 */
	private static void alterarCliente(){
		
		int codigo;
		String opcao;
	    Cliente alteracao;
		
		try {
			codigo = Console.readInt("Digite o código do usuário que deseja alterar: ");
			System.out.println(Cadastro.buscarClienteCod(codigo));		
			alteracao = Cadastro.buscarClienteCod(codigo);
			do{
			opcao = Console.readLine("Deseja  realmente alterar o cliente? (S/N): ");
			}while(!(opcao.toUpperCase().charAt(0) == 'S'));
			
			if(opcao.toUpperCase().charAt(0) == 'S' ){

				String cpf;
				String nome;
				String telefone;
				String email;
				GregorianCalendar data = new GregorianCalendar();

				System.out.println(" ---- ALTERAÇÃO DE CLIENTE ---- ");
				
				do{
					cpf = Console.readLine("CPF: ");
				}while(!LtpUtil.validarCPF(cpf));
				
				do{
					nome = Console.readLine("NOME: ");
				}while(!nome.matches("^(\\D*)+(\\s*)+(\\D)$"));
				
				telefone =  Console.readLine("TELEFONE: ");
				
				do{
					email = Console.readLine("EMAIL: ");
				}while(!LtpUtil.validarEmail(email));
				
				alteracao.setCpf(cpf);
				alteracao.setNome(nome);
				alteracao.setTelefone(telefone);
				alteracao.setEmail(email);
				alteracao.setDataUltAlteracao(data); // Passando data da alteração		
			}
			
		} catch (SisVendasException e) {
			System.out.println("Deu ruim manolo!!!!!");
		}	
	}
	
	
	/**
	 * Método responsável pela exclusão de clientes
	 * @throws SisVendasException - Quando não é possível encontrar o cliente
	 */
	public static void excluirCliente() throws SisVendasException{
		
		int codigo  = Console.readInt("Digite o código do cliente que deseja exlcuir: ");
		
		try{
		Cadastro.clientes.remove(Cadastro.buscarClienteCod(codigo));
		System.out.println("Cliente excluído com sucessso!");
		}catch(Exception e){
			 System.out.println("\nNão foi possível excuir o cliente, código inválido!");
		}
	}
	
	
	/**
	 * Método responsável pela busca de clientes pelo CPF
	 * @throws SisVendasException - Quando não é encontrado cliente pelo CPF informado
	 */
	public static void buscarClienteCPF() throws SisVendasException {
		String cpf = Console.readLine("Digite o CPF para buscar: " );
		System.out.println(Cadastro.buscarClienteCPF(cpf));			
	}
	
	
	/**
	 * Método para retornar a lista de vendas por ordem de cliente e data...
	 */
	public static void exibeClienteEmOrdem() {
		
	}
	
	
	/**
	 * Método resposnsável pelo cadastro de produto
	 */
	
	private static void incluirProduto (){
		String nome;
		double precoUnitatio;
		GregorianCalendar dataInclusao = new GregorianCalendar();
		GregorianCalendar dataUltAlteracao = new GregorianCalendar();
		
		Produto inclusaoProduto;
		
		System.out.println(" ---- CADASTRO DE PRODUTOS ---- ");
		
		do{
		nome = Console.readLine("NOME DO PRODUTO: ");
		}while(nome == "");
		
		do{
			precoUnitatio = Console.readDouble("PREÇO UNITÁRO: ");
		}while(precoUnitatio <= 0);
		
		Cadastro.incluirProduto(inclusaoProduto = new Produto(nome,precoUnitatio, new GregorianCalendar(), new GregorianCalendar()));

	}
	
	/**
	 * Método responsável pela alteração de produtos pelo código
	 */
	private static void alterarProduto(){
		
		int codigo;
		String opcao;
	    Produto alteracao;
		
		try {
			codigo = Console.readInt("Digite o código do produto que deseja alterar: ");
			System.out.println(Cadastro.buscarProdutoCod(codigo));		
			alteracao = Cadastro.buscarProdutoCod(codigo);
			do{
			opcao = Console.readLine("Deseja  realmente alterar o produto? (S/N): ");
			}while(!(opcao.toUpperCase().charAt(0) == 'S'));
			
			if(opcao.toUpperCase().charAt(0) == 'S' ){

				String nome;
				double precoUnitatio;
				GregorianCalendar dataAlteracao = new GregorianCalendar();

				System.out.println(" ---- ALTERAÇÃO DE CLIENTE ---- ");

				do{
					nome = Console.readLine("NOME: ");
				}while(nome == "");
				
				do{
					precoUnitatio = Console.readDouble("PREÇO UNITÁRIO: ");
				}while(precoUnitatio <= 0);
				
				alteracao.setNome(nome);
				alteracao.setPrecoUnitatio(precoUnitatio);
				alteracao.setDataUltAlteracao(dataAlteracao); // Passando data da alteração		
			}
			
		} catch (SisVendasException e) {
			System.out.println("Deu ruim manolo!!!!!");
		}	
	}
	
	/**
	 * Método responsável pela exclusão de produtos via código
	 * @throws SisVendasException - Quando não é possível encontrar o cliente
	 */
	public static void excluirProduto() throws SisVendasException{
		
		int codigo  = Console.readInt("Digite o código do produto que deseja exlcuir: ");
		
		try{
		Cadastro.produto.remove(Cadastro.buscarProdutoCod(codigo));
		System.out.println("Produto excluído com sucessso!");
		}catch(Exception e){
			 System.out.println("\nNão foi possível excuir o produto, código inválido!");
		}
	}
	
	
	/**
	 * Método para retornar a lista de vendas por ordem de cliente e data...
	 */
	public static void exibeProdutoEmOrdem() {
		
	}
	
	
	/**
	 * Método responsável pelo cadastro de vendas
	 */
	private static void incluirVenda (){
		
		Cliente cliente;
		GregorianCalendar dataVenda = new GregorianCalendar();
		String cpf;
		int codigoProduto;
		Produto produto = null;
		int quantidade;
		double preco = 0;
		double valor;
		ArrayList<ItemVenda> itensVendas = new ArrayList<ItemVenda>();
		Venda inclusaoVenda;
		
		
		System.out.println(" ---- CADASTRO DE VENDAS ---- ");
		
		try {
		
		do{
		cpf = Console.readLine("CPF DO CLIENTE ");
		}while(!LtpUtil.validarCPF(cpf));
		
		cliente = Cadastro.buscarClienteCPF(cpf);
		
		do{
			codigoProduto = Console.readInt("CÓDIGO DO PRODUTO: ");
			
			try {
				produto = Cadastro.buscarProdutoCod(codigoProduto);
				if (produto == null) {
					System.out.println("Nao existe produto neste codigo");
				}
			} catch (SisVendasException e) {
				System.out.println(e.getMessage());
			}	
		}while(produto == null);
		
		
		do {

			quantidade = Console
					.readInt("QUANTIDADE DE ITENS: ");
			if (quantidade <= 0) {
				System.out
						.println("A quantidade tem que ser maior que zero!");
			} else {

				do {
					preco = Console
							.readDouble("PREÇO DO PRODUTO ");
					valor = preco * quantidade;
					if (preco <= 0) {
						System.out
								.println("A quantidade tem que ser maior que zero!");
					}
				} while (preco <= 0);

			}
		} while (quantidade <= 0);
		
		itensVendas.add(new ItemVenda(produto, preco, quantidade, preco));
		Cadastro.incluirVenda(new Venda (cliente, new GregorianCalendar(), itensVendas));

		} catch (SisVendasException e) {
			System.out.println(e.getMessage());
		}
	}
	
	
	public static void excluirVenda() throws SisVendasException{
		
		int codigo  = Console.readInt("Digite o número da venda que deseja exlcuir: ");
		
		try{
		Cadastro.venda.remove(Cadastro.buscarVendaCod(codigo));
		System.out.println("Venda ecluída com sucesso!");
		}catch(Exception e){
			 System.out.println("\nNão foi possível excuir o produto, código inválido!");
		}
	}
	
	
	
	
	
}